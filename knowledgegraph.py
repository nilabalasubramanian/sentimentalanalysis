# -*- coding: utf-8 -*-
"""KnowledgeGraph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yqntB1DsD0_LY-ai5QL-GHx4BiK6CTHD
"""

import spacy
import numpy as np 
import pandas as pd 
import os

!pip install beautifulsoup4

# Commented out IPython magic to ensure Python compatibility.
import re
import pandas as pd
import bs4
import requests
import spacy
from spacy import displacy
nlp = spacy.load('en_core_web_sm')

from spacy.matcher import Matcher 
from spacy.tokens import Span 

import networkx as nx

import matplotlib.pyplot as plt
from tqdm import tqdm

pd.set_option('display.max_colwidth', 200)
# %matplotlib inline

cs = pd.read_csv("wiki_sentences_v2.csv")
cs.shape

cs

def get_entities(sent):
   
    entities1 = ""
    entities2 = ""

    prv_token_dep = "" 
    prv_token_text = ""  

    prefix = ""
    modifier = ""

    

    for token in nlp(sent):
       
        if token.dep_ != "punct":
            
            if token.dep_ == "compound":
                prefix = token.text
               
                if prv_token_dep == "compound":
                    prefix = prv_token_text + " " + token.text

           
            if token.dep_.endswith("mod") == True:
                modifier = token.text
               
                if prv_token_dep == "compound":
                    modifier = prv_token_text + " " + token.text

          
            if token.dep_.find("subj") == True:
                entities1 = modifier + " " + prefix + " " + token.text
                prefix = ""
                modifier = ""
                prv_token_dep = ""
                prv_token_text = ""

            if token.dep_.find("obj") == True:
                entities2  = modifier + " " + prefix + " " + token.text

           
            prv_token_dep = token.dep_
            prv_token_text = token.text


    return [entities1.strip(), entities2.strip()]

get_entities("Film had 200 actors")

entity_pairs = []

for i in tqdm(cs["sentence"]):
    entity_pairs.append(get_entities(i))

entity_pairs[10:20]

def get_relation(sent):
 
    doc = nlp(sent)
 
    
    matcher = Matcher(nlp.vocab)
 
   
    pattern = [{'DEP':'ROOT'},
            {'DEP':'prep','OP':"?"},
            {'DEP':'agent','OP':"?"},  
            {'POS':'ADJ','OP':"?"}] 
 
   
    matcher.add("matching_1", [pattern], on_match=None) 
 
    matches = matcher(doc)
    k = len(matches) - 1
 
    span = doc[matches[k][1]:matches[k][2]] 
 
    return(span.text)

get_relation("Nila completed his task")

relations = [get_relation(i) for i in tqdm(cs['sentence'])]

pd.Series(relations).value_counts()[:50]

source = [i[0] for i in entity_pairs]


target = [i[1] for i in entity_pairs]

kg_df = pd.DataFrame({'source':source, 'target':target, 'edge':relations})
kg_df

G=nx.from_pandas_edgelist(kg_df, "source", "target", 
                          edge_attr=True, create_using=nx.MultiDiGraph())

plt.figure(figsize=(12,12))

pos = nx.spring_layout(G)
nx.draw(G, with_labels=True, node_color='red', edge_cmap=plt.cm.Blues, pos = pos)
plt.show()

G=nx.from_pandas_edgelist(kg_df[kg_df['edge']=="composed by"], "source", "target", 
                          edge_attr=True, create_using=nx.MultiDiGraph())

plt.figure(figsize=(12,12))
pos = nx.spring_layout(G, k = 0.5) # k regulates the distance between nodes
nx.draw(G, with_labels=True, node_color='red', node_size=1500, edge_cmap=plt.cm.Blues, pos = pos, font_weight='bold')
plt.show()